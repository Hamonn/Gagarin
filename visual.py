import os
import time
import pyperclip
import threading
import multiprocessing
from PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QFileDialog,
                             QDialog, QSpinBox, QHBoxLayout, QLineEdit, QMessageBox, QCheckBox)
from crypto_module import CryptoModule


def delete_file_after_delay(file_path, delay):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)."""
    time.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞.")


def monitor_clipboard(file_path):
    """–°–ª–µ–¥–∏—Ç –∑–∞ –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞ –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            decrypted_content = f.read().strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        return

    while os.path.exists(file_path):
        clipboard_content = pyperclip.paste().strip()
        if clipboard_content == decrypted_content:
            os.remove(file_path)
            pyperclip.copy("")  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –æ—á–∏—â–µ–Ω.")
            break
        time.sleep(1)


class TimerDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞"""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢–∞–π–º–µ—Ä")
        self.setFixedSize(200, 100)
        layout = QVBoxLayout()

        self.timer_label = QLabel("–£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫):")
        self.timer_input = QSpinBox()
        self.timer_input.setRange(1, 3600)
        self.ok_button = QPushButton("–û–ö")
        self.ok_button.clicked.connect(self.accept)

        layout.addWidget(self.timer_label)
        layout.addWidget(self.timer_input)
        layout.addWidget(self.ok_button)
        self.setLayout(layout)


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        self.setFixedSize(400, 350)
        self.crypto = CryptoModule()

        self.delete_after = 10  # –¢–∞–π–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (10 —Å–µ–∫)
        self.enable_copy_protection = False  # –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∞)

        layout = QVBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = QPushButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.settings_button.clicked.connect(self.open_settings)

        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        self.timer_button = QPushButton("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")
        self.timer_button.clicked.connect(self.set_timer)

        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_layout = QHBoxLayout()
        self.file_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        self.file_button = QPushButton("...")
        self.file_button.clicked.connect(self.select_file)
        file_layout.addWidget(self.file_label)
        file_layout.addWidget(self.file_button)

        # –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        password_layout = QHBoxLayout()
        self.password_label = QLabel("–ü–∞—Ä–æ–ª—å:")
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.password_input.textChanged.connect(self.check_ready)
        password_layout.addWidget(self.password_label)
        password_layout.addWidget(self.password_input)

        # –ö–Ω–æ–ø–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        button_layout = QHBoxLayout()
        self.encrypt_button = QPushButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        self.encrypt_button.setEnabled(False)
        self.encrypt_button.clicked.connect(self.encrypt_file)

        self.decrypt_button = QPushButton("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        self.decrypt_button.setEnabled(False)
        self.decrypt_button.clicked.connect(self.decrypt_file)

        button_layout.addWidget(self.encrypt_button)
        button_layout.addWidget(self.decrypt_button)

        layout.addWidget(self.settings_button)
        layout.addWidget(self.timer_button)
        layout.addLayout(file_layout)
        layout.addLayout(password_layout)
        layout.addLayout(button_layout)
        self.setLayout(layout)

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        layout = QVBoxLayout()

        self.copy_protection_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.copy_protection_checkbox.setChecked(self.enable_copy_protection)

        save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_button.clicked.connect(lambda: self.save_settings(dialog))

        layout.addWidget(self.copy_protection_checkbox)
        layout.addWidget(save_button)
        dialog.setLayout(layout)
        dialog.exec()

    def save_settings(self, dialog):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ–∫–±–æ–∫—Å–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.enable_copy_protection = self.copy_protection_checkbox.isChecked()
        dialog.accept()

    def set_timer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        dialog = TimerDialog()
        if dialog.exec():
            self.delete_after = dialog.timer_input.value()
            QMessageBox.information(self, "–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", f"–§–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ {self.delete_after} —Å–µ–∫.")

    def select_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            self.file_label.setText(file_path)
            self.check_ready()

    def check_ready(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –∏ –ø–∞—Ä–æ–ª—å –≤—ã–±—Ä–∞–Ω—ã"""
        file_selected = self.file_label.text() != "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"
        password_entered = bool(self.password_input.text())

        self.encrypt_button.setEnabled(file_selected and password_entered)
        self.decrypt_button.setEnabled(file_selected and password_entered and self.file_label.text().endswith(".enc"))

    def encrypt_file(self):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ crypto_module"""
        file_path = self.file_label.text()
        password = self.password_input.text()

        try:
            encrypted_file = self.crypto.encrypt_file(file_path, password)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: {encrypted_file}")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def decrypt_file(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ crypto_module —Å —É—á—ë—Ç–æ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        file_path = self.file_label.text()
        password = self.password_input.text()

        try:
            decrypted_file = self.crypto.decrypt_file(file_path, password)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: {decrypted_file}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if self.enable_copy_protection:
                threading.Thread(target=monitor_clipboard, args=(decrypted_file,), daemon=True).start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–≤—Å–µ–≥–¥–∞)
            p = multiprocessing.Process(target=delete_file_after_delay, args=(decrypted_file, self.delete_after))
            p.start()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


if __name__ == "__main__":
    multiprocessing.freeze_support()
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec()
