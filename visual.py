import os
import time
import multiprocessing
from PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QFileDialog,
                             QComboBox, QDialog, QSpinBox, QHBoxLayout, QLineEdit, QMessageBox)
from crypto_module import CryptoModule


def delete_file_after_delay(file_path, delay):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)."""
    time.sleep(delay)
    if os.path.exists(file_path):
        os.remove(file_path)
        print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª—ë–Ω –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞.")


class TimerDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞"""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–¢–∞–π–º–µ—Ä")
        self.setFixedSize(200, 100)
        layout = QVBoxLayout()

        self.timer_label = QLabel("–£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ (—Å–µ–∫):")
        self.timer_input = QSpinBox()
        self.timer_input.setRange(1, 3600)
        self.ok_button = QPushButton("–û–ö")
        self.ok_button.clicked.connect(self.accept)

        layout.addWidget(self.timer_label)
        layout.addWidget(self.timer_input)
        layout.addWidget(self.ok_button)
        self.setLayout(layout)


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        self.setFixedSize(400, 300)
        self.crypto = CryptoModule()
        self.delete_after = None  # –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        self.encrypted_file_path = None  # –ü—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

        layout = QVBoxLayout()

        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_layout = QHBoxLayout()
        self.file_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        self.file_button = QPushButton("...")
        self.file_button.clicked.connect(self.select_file)
        file_layout.addWidget(self.file_label)
        file_layout.addWidget(self.file_button)

        # –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        password_layout = QHBoxLayout()
        self.password_label = QLabel("–ü–∞—Ä–æ–ª—å:")
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.password_input.textChanged.connect(self.check_ready)
        password_layout.addWidget(self.password_label)
        password_layout.addWidget(self.password_input)

        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        method_layout = QHBoxLayout()
        self.method_label = QLabel("–ú–µ—Ç–æ–¥:")
        self.method_combo = QComboBox()
        self.method_combo.addItems(["AES", "–î—Ä—É–≥–æ–π –º–µ—Ç–æ–¥"])  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        self.method_combo.currentIndexChanged.connect(self.check_ready)
        method_layout.addWidget(self.method_label)
        method_layout.addWidget(self.method_combo)

        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        self.timer_button = QPushButton("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")
        self.timer_button.clicked.connect(self.set_timer)

        # –ö–Ω–æ–ø–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        button_layout = QHBoxLayout()
        self.encrypt_button = QPushButton("üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        self.encrypt_button.setEnabled(False)
        self.encrypt_button.clicked.connect(self.encrypt_file)

        self.decrypt_button = QPushButton("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å")
        self.decrypt_button.setEnabled(False)
        self.decrypt_button.clicked.connect(self.decrypt_file)

        button_layout.addWidget(self.encrypt_button)
        button_layout.addWidget(self.decrypt_button)

        layout.addLayout(file_layout)
        layout.addLayout(password_layout)
        layout.addLayout(method_layout)
        layout.addWidget(self.timer_button)
        layout.addLayout(button_layout)
        self.setLayout(layout)

    def select_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
        if file_path:
            self.file_label.setText(file_path)
            self.check_ready()

    def set_timer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
        dialog = TimerDialog()
        if dialog.exec():
            self.delete_after = dialog.timer_input.value()
            QMessageBox.information(self, "–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", f"–§–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ {self.delete_after} —Å–µ–∫.")

    def check_ready(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª, –ø–∞—Ä–æ–ª—å –∏ –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã"""
        file_selected = self.file_label.text() != "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"
        password_entered = bool(self.password_input.text())
        method_selected = self.method_combo.currentText() != ""

        self.encrypt_button.setEnabled(file_selected and password_entered and method_selected)
        self.decrypt_button.setEnabled(file_selected and password_entered and self.file_label.text().endswith(".enc"))

    def encrypt_file(self):
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        file_path = self.file_label.text()
        password = self.password_input.text()
        method = self.method_combo.currentText()

        if file_path == "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª" or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª, –º–µ—Ç–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            return

        try:
            encrypted_file = self.crypto.encrypt_file(file_path, password, method)
            self.encrypted_file_path = encrypted_file  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É

            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: {encrypted_file}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
            if self.delete_after:
                p = multiprocessing.Process(target=delete_file_after_delay, args=(encrypted_file, self.delete_after))
                p.start()
                print(f"–§–∞–π–ª {encrypted_file} –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ {self.delete_after} —Å–µ–∫—É–Ω–¥.")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def decrypt_file(self):
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞"""
        file_path = self.file_label.text()
        password = self.password_input.text()
        method = self.method_combo.currentText()

        if file_path == "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª" or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –º–µ—Ç–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            return

        try:
            decrypted_file = self.crypto.decrypt_file(file_path, password)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: {decrypted_file}")

            if os.path.exists(file_path):
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


if __name__ == "__main__":
    multiprocessing.freeze_support()  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã multiprocessing –Ω–∞ Windows
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec()
